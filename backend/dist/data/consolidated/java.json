[
    {
        "name": "Array Manipulation",
        "snippets": [
            {
                "title": "Remove duplicates",
                "description": "Removes duplicate elements from an list",
                "author": "Mcbencrafter",
                "tags": [
                    "list",
                    "duplicates",
                    "unique"
                ],
                "contributors": [],
                "code": "import java.util.List;\nimport java.util.stream.Collectors;\n\npublic static <T> List<T> removeDuplicates(List<T> list) {\n    return list.stream()\n        .distinct()\n        .collect(Collectors.toList());\n}\n\n// Usage:\nList<Integer> list = List.of(1, 2, 3, 4, 5, 1, 2, 3, 4, 5);\nList<Integer> result = removeDuplicates(list);\nSystem.out.println(\"List with duplicates removed: \" + result); // [1, 2, 3, 4, 5]\n",
                "extension": "java"
            },
            {
                "title": "Zip Two Lists",
                "description": "Zips two lists into a list of paired elements, combining corresponding elements from both lists.",
                "author": "davidanukam",
                "tags": [
                    "lists",
                    "zip",
                    "stream-api",
                    "collections"
                ],
                "contributors": [],
                "code": "import java.util.*; // Importing utility classes for List and Arrays\nimport java.util.stream.IntStream; // Importing IntStream for range and mapping\nimport java.util.stream.Collectors; // Importing Collectors for collecting stream results\n\npublic <A, B> List<List<Object>> zip(List<A> list1, List<B> list2) {\n    // Create pairs by iterating through the indices of both lists\n    return IntStream.range(0, Math.min(list1.size(), list2.size())) // Limit the range to the smaller list\n            .mapToObj(i -> Arrays.asList(list1.get(i), list2.get(i))) // Pair elements from both lists at index i\n            .collect(Collectors.toList()); // Collect the pairs into a List\n}\n\n// Usage:\nList<String> arr1 = Arrays.asList(\"a\", \"b\", \"c\");\nList<Integer> arr2 = Arrays.asList(1, 2, 3);\nList<List<Object>> zipped = zip(arr1, arr2);\n\nSystem.out.println(zipped); // Output: [[a, 1], [b, 2], [c, 3]]\n",
                "extension": "java"
            }
        ]
    },
    {
        "name": "Basics",
        "snippets": [
            {
                "title": "Hello-World",
                "description": "Prints Hello world in the console",
                "author": "SarvariHarshitha",
                "tags": [
                    "java",
                    "console",
                    "printing"
                ],
                "contributors": [],
                "code": "// This is the main class of the Java program\npublic class Main {\n    // The main method is the entry point of the program\n    public static void main(String args[]) {\n        // This statement prints \"Hello, World!\" to the console\n        System.out.println(\"Hello, World!\");\n    }\n}\n\n",
                "extension": "java"
            }
        ]
    },
    {
        "name": "Bit Manipulation",
        "snippets": [
            {
                "title": "Bit Counting",
                "description": "Counts the set bits in the binary representation of an integer",
                "author": "Mcbencrafter",
                "tags": [
                    "math",
                    "number",
                    "bits",
                    "bit-counting"
                ],
                "contributors": [],
                "code": "public static int countBits(int number) {\n    int bits = 0;\n        \n    while (number > 0) {\n        bits += number & 1;\n        number >>= 1;\n    }\n\n    return bits;\n}\n\n// Usage:\nint number = 5;\nSystem.out.println(countBits(5)); // 2 (101)\n",
                "extension": "java"
            },
            {
                "title": "Is Power Of Two",
                "description": "Checks if a number is a power of two",
                "author": "Mcbencrafter",
                "tags": [
                    "math",
                    "number",
                    "bit",
                    "power-of-two"
                ],
                "contributors": [],
                "code": "public static boolean isPowerOfTwo(int number) {\n    return (number > 0) && ((number & (number - 1)) == 0);\n}\n\n// Usage:\nint number = 16;\nSystem.out.println(isPowerOfTwo(number)); // true (2^4)\n",
                "extension": "java"
            }
        ]
    },
    {
        "name": "Date Time",
        "snippets": [
            {
                "title": "Date Time Formatting American",
                "description": "Formats a timestamp to a human-readable date-time string in the format \"MM/dd/yyyy hh:mm:ss a\"",
                "author": "Mcbencrafter",
                "tags": [
                    "date",
                    "time",
                    "date-time",
                    "formatting",
                    "american"
                ],
                "contributors": [],
                "code": "import java.time.Instant;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.TimeUnit;\n\n// using the system default time zone\npublic static String formatDateTimeAmerican(long time, TimeUnit timeUnit) {\n    return formatDateTimeAmerican(time, timeUnit, ZoneId.systemDefault());\n}\n\npublic static String formatDateTimeAmerican(long time, TimeUnit timeUnit, ZoneId timeZone) {\n    return DateTimeFormatter.ofPattern(\"MM/dd/yyyy hh:mm:ss a\")\n            .withZone(\n                timeZone != null ? timeZone : ZoneId.systemDefault()\n            )\n            .format(Instant.ofEpochSecond(\n                timeUnit.toSeconds(time)\n            ));\n}\n\n// Usage:\nSystem.out.println(formatDateTimeAmerican(1735689599, TimeUnit.SECONDS)); // \"12/31/2024 | 11:59:59 PM\" for GMT+0000\nSystem.out.println(formatDateTimeAmerican(1735689599, TimeUnit.SECONDS, ZoneId.of(\"GMT+0000\"))); // \"12/31/2024 | 11:59:59 PM\"\n",
                "extension": "java"
            },
            {
                "title": "Date Time Formatting European",
                "description": "Formats a timestamp to a human-readable date-time string in the format \"dd.MM.yyyy HH:mm:ss\"",
                "author": "Mcbencrafter",
                "tags": [
                    "date",
                    "time",
                    "date-time",
                    "formatting",
                    "european"
                ],
                "contributors": [],
                "code": "import java.time.Instant;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.TimeUnit;\n\n// using the system default time zone\npublic static String formatDateTimeEuropean(long time, TimeUnit timeUnit) {\n    return formatDateTimeEuropean(time, timeUnit, ZoneId.systemDefault());\n}\n\npublic static String formatDateTimeEuropean(long time, TimeUnit timeUnit, ZoneId timeZone) {\n    return DateTimeFormatter.ofPattern(\"dd.MM.yyyy HH:mm:ss\")\n            .withZone(\n                timeZone != null ? timeZone : ZoneId.systemDefault()\n            )\n            .format(Instant.ofEpochSecond(\n                    timeUnit.toSeconds(time)\n            ));\n}\n\n// Usage:\nSystem.out.println(formatDateTimeEuropean(1735689599, TimeUnit.SECONDS)); // \"31.12.2024 | 23:59:59\" for GMT+0000\nSystem.out.println(formatDateTimeEuropean(1735689599, TimeUnit.SECONDS, ZoneId.of(\"GMT+0000\"))); // \"31.12.2024 | 23:59:59\"\n",
                "extension": "java"
            },
            {
                "title": "Duration Formatting Hours Minutes Seconds",
                "description": "Converts a given time duration to a human-readable string in the format \"hh:mm(:ss)\"",
                "author": "Mcbencrafter",
                "tags": [
                    "time",
                    "formatting",
                    "hours",
                    "minutes",
                    "seconds"
                ],
                "contributors": [],
                "code": "import java.util.concurrent.TimeUnit;\n    \npublic static String formatDurationToHoursMinutesAndSeconds(int time, TimeUnit timeUnit, boolean showSeconds) {\n    long totalSeconds = timeUnit.toSeconds(time);\n\n    if (totalSeconds < 0)\n        throw new IllegalArgumentException(\"Duration must be a non-negative value.\");\n\n    // These variables can be directly used in the return statement,\n    // but are kept as separate variables here for better readability.\n    long hours = totalSeconds / 3600;\n    long minutes = (totalSeconds % 3600) / 60;\n    long seconds = totalSeconds % 60;\n\n    if (showSeconds) {\n        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n    } else {\n        return String.format(\"%02d:%02d\", hours, minutes);\n    }\n}\n\n// Usage:\nSystem.out.println(formatDurationToHoursMinutesAndSeconds(3810, TimeUnit.SECONDS, true)); // \"01:03:30\"\nSystem.out.println(formatDurationToHoursMinutesAndSeconds(3810, TimeUnit.SECONDS, false)); // \"01:03\"\n",
                "extension": "java"
            },
            {
                "title": "Duration Formatting Minutes Seconds",
                "description": "Converts a given time duration to a human-readable string in the format \"mm:ss\"",
                "author": "Mcbencrafter",
                "tags": [
                    "time",
                    "formatting",
                    "minutes",
                    "seconds"
                ],
                "contributors": [],
                "code": "import java.util.concurrent.TimeUnit;\n\npublic static String formatDurationToMinutesAndSeconds(int time, TimeUnit timeUnit) {\n    long totalSeconds = timeUnit.toSeconds(time);\n\n    if (totalSeconds < 0)\n        throw new IllegalArgumentException(\"Duration must be a non-negative value.\");\n\n    // These variables can be directly used in the return statement,\n    // but are kept here as separate variables for better readability.\n    long minutes = totalSeconds / 60;\n    long seconds = totalSeconds % 60;\n\n    return String.format(\"%02d:%02d\", minutes, seconds);\n}\n\n// Usage:\nSystem.out.println(formatDurationToMinutesAndSeconds(120, TimeUnit.SECONDS)); // \"02:00\"\nSystem.out.println(formatDurationToMinutesAndSeconds(75, TimeUnit.SECONDS)); // \"01:15\"\n",
                "extension": "java"
            }
        ]
    },
    {
        "name": "Math",
        "snippets": [
            {
                "title": "Checksum",
                "description": "Calculates the checksum of an int",
                "author": "Mcbencrafter",
                "tags": [
                    "math",
                    "number",
                    "checksum"
                ],
                "contributors": [],
                "code": "public static int checksum(int number) {\n    number = Math.abs(number);\n    int sum = 0;\n\n    while (number != 0) {\n        sum += number % 10;\n        number /= 10;\n    }\n\n    return sum;\n}\n\n// Usage:\nint number = 12345;\nSystem.out.println(checksum(number)); // 15 = 1+2+3+4+5\n",
                "extension": "java"
            },
            {
                "title": "Factorial",
                "description": "Computes the factorial of a given number",
                "author": "Mcbencrafter",
                "tags": [
                    "math",
                    "number",
                    "factorial"
                ],
                "contributors": [],
                "code": "import java.math.BigInteger;\n\npublic static BigInteger factorial(int number) {\n    BigInteger result = BigInteger.ONE;\n\n    for (int currentNumber = 1; currentNumber <= number; currentNumber++) {\n        result = result.multiply(BigInteger.valueOf(currentNumber));\n    }\n\n    return result;\n}\n\n// Usage:\nint number = 6;\nSystem.out.println(factorial(number)); // 720 = 6*5*4*3*2\n",
                "extension": "java"
            },
            {
                "title": "Fibonacci",
                "description": "Calculates the nth fibonacci number",
                "author": "Mcbencrafter",
                "tags": [
                    "math",
                    "number",
                    "fibonacci"
                ],
                "contributors": [],
                "code": "public static int fibonacci(int number) {\n    if (number <= 1) \n        return number;\n        \n    return fibonacci(number - 1) + fibonacci(number - 2);\n}\n\n// Usage:\nint number = 5;\nSystem.out.println(fibonacci(number)) // 3 (0, 1, 1, 2, 3)\n",
                "extension": "java"
            },
            {
                "title": "Greatest Common Divisor",
                "description": "Calculates the greatest common divisor (gcd) of two numbers",
                "author": "Mcbencrafter",
                "tags": [
                    "math",
                    "number",
                    "greatest-common-devisor",
                    "gcd",
                    "euclidean-algorithm"
                ],
                "contributors": [],
                "code": "public static int gcd(int number1, int number2) {\n    while (number2 != 0) {\n        int remainder = number2;\n        number2 = number1 % number2;\n        number1 = remainder;\n    }\n\n    return number1;\n}\n\n// Usage:\nint a = 16;\nint b = 12;\nSystem.out.println(gcd(a, b)); // 4\n",
                "extension": "java"
            },
            {
                "title": "Least Common Multiple",
                "description": "Calculates the least common multiple (lcm) of two numbers",
                "author": "Mcbencrafter",
                "tags": [
                    "math",
                    "number",
                    "least-common-multiple",
                    "lcm",
                    "euclidean-algorithm"
                ],
                "contributors": [],
                "code": "public static int lcm(int number1, int number2) {\n    int gcdNumber1 = number1;\n    int gcdNumber2 = number2;\n    \n    while (gcdNumber2 != 0) {\n        int remainder = gcdNumber2;\n        gcdNumber2 = gcdNumber1 % gcdNumber2;\n        gcdNumber1 = remainder;\n    }\n    \n    return (number1 / gcdNumber1) * number2;\n}\n\n// Usage:\nint a = 16;\nint b = 12;\nSystem.out.println(lcm(a, b)); // 48\n",
                "extension": "java"
            },
            {
                "title": "Prime Check",
                "description": "Checks if a number is a prime",
                "author": "Mcbencrafter",
                "tags": [
                    "math",
                    "number",
                    "prime"
                ],
                "contributors": [],
                "code": "public static boolean isPrime(int number) {\n    if (number <= 1) \n        return false;\n\n    if (number <= 3) \n        return true;\n\n    boolean prime = true;\n    for (int divisor = 3; divisor < number; divisor++) {\n        if (number % divisor != 0)\n            continue;\n\n        prime = false;\n        break;\n    }\n\n    return prime;\n}\n\n// Usage:\nint number = 31;\nSystem.out.println(isPrime(number)); // true\n",
                "extension": "java"
            }
        ]
    },
    {
        "name": "String Manipulation",
        "snippets": [
            {
                "title": "Ascii To String",
                "description": "Converts a list of ascii numbers into a string",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "ascii",
                    "encoding",
                    "decode",
                    "conversion"
                ],
                "contributors": [],
                "code": "import java.util.List;\n\npublic static String asciiToString(List<Integer> asciiCodes) {\n    StringBuilder text = new StringBuilder();\n\n    for (int asciiCode : asciiCodes) {\n        text.append((char) asciiCode);\n    }\n\n    return text.toString();\n}\n\n// Usage:\nSystem.out.println(asciiToString(List.of(104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100))); // \"hello world\"\n",
                "extension": "java"
            },
            {
                "title": "camelCase to snake_case",
                "description": "Converts a camelCase string into snake_case",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "conversion",
                    "camel-case",
                    "snake-case"
                ],
                "contributors": [],
                "code": "public static String camelToSnake(String camelCase) {\n    return camelCase.replaceAll(\"([a-z])([A-Z])\", \"$1_$2\").toLowerCase();\n}\n\n// Usage:\nSystem.out.println(camelToSnake(\"helloWorld\")); // \"hello_world\"\n",
                "extension": "java"
            },
            {
                "title": "Capitalize Words",
                "description": "Capitalizes the first letter of each word in a string",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "capitalize",
                    "words"
                ],
                "contributors": [],
                "code": "public static String capitalizeWords(String text) {\n    String[] words = text.split(\"(?<=\\\\S)(?=\\\\s+)|(?<=\\\\s+)(?=\\\\S)\"); // this is needed to preserve spaces (text.split(\" \") would remove multiple spaces)\n    StringBuilder capitalizedText = new StringBuilder();\n    \n    for (String word : words) {\n        if (word.trim().isEmpty()) {\n            capitalizedText.append(word);\n            continue;\n        }\n        capitalizedText.append(Character.toUpperCase(word.charAt(0)))\n                .append(word.substring(1));\n    }\n    \n    return capitalizedText.toString();\n}\n\n// Usage:\nSystem.out.println(capitalizeWords(\"hello  world\")); // \"Hello  World\"\n",
                "extension": "java"
            },
            {
                "title": "Check Anagram",
                "description": "Checks if two strings are anagrams, meaning they contain the same characters ignoring order, spaces and case sensitivity",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "anagram",
                    "compare",
                    "arrays"
                ],
                "contributors": [],
                "code": "import java.util.Arrays;\n\npublic static boolean isAnagram(String text1, String text2) {\n    String text1Normalized = text1.replaceAll(\"\\\\s+\", \"\");\n    String text2Normalized = text2.replaceAll(\"\\\\s+\", \"\");\n\n    if (text1Normalized.length() != text2Normalized.length())\n        return false;\n        \n    char[] text1Array = text1Normalized.toCharArray();\n    char[] text2Array = text2Normalized.toCharArray();\n    Arrays.sort(text1Array);\n    Arrays.sort(text2Array);\n    return Arrays.equals(text1Array, text2Array);\n}\n\n// Usage:\nSystem.out.println(isAnagram(\"listen\", \"silent\")); // true\nSystem.out.println(isAnagram(\"hello\", \"world\"));   // false\n",
                "extension": "java"
            },
            {
                "title": "Check Palindrome",
                "description": "Checks if a string reads the same backward as forward, ignoring whitespaces and case sensitivity",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "palindrome",
                    "compare",
                    "reverse"
                ],
                "contributors": [],
                "code": "public static boolean isPalindrome(String text) {\n    String cleanText = text.toLowerCase().replaceAll(\"\\\\s+\", \"\");\n        \n    return new StringBuilder(cleanText)\n            .reverse()\n            .toString()\n            .equals(cleanText);\n}\n\n// Usage:\nSystem.out.println(isPalindrome(\"A man a plan a canal Panama\")); // true\n",
                "extension": "java"
            },
            {
                "title": "Count Character Frequency",
                "description": "Counts the frequency of each character in a string",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "character",
                    "frequency",
                    "character-frequency"
                ],
                "contributors": [],
                "code": "public static Map<Character, Integer> characterFrequency(String text, boolean countSpaces, boolean caseSensitive) {\n    Map<Character, Integer> frequencyMap = new HashMap<>();\n\n    for (char character : text.toCharArray()) {\n        if (character == ' ' && !countSpaces)\n            continue;\n\n        if (!caseSensitive)\n            character = Character.toLowerCase(character);\n\n        frequencyMap.put(character, frequencyMap.getOrDefault(character, 0) + 1);\n    }\n\n    return frequencyMap;\n}\n\n// Usage:\nSystem.out.println(characterFrequency(\"hello world\", false, false)); // {r=1, d=1, e=1, w=1, h=1, l=3, o=2}\n",
                "extension": "java"
            },
            {
                "title": "Count Character Occurrences",
                "description": "Counts the occurrences of the specified characters in a given string",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "characters",
                    "counter",
                    "occurence"
                ],
                "contributors": [],
                "code": "import java.util.List;\n\npublic static int countCharacterOccurrences(String text, List<Character> characters) {\n    int count = 0;\n    \n    for (char character : text.toCharArray()) {\n        if (characters.indexOf(character) == -1)\n            continue;\n                \n        count++;\n    }\n    \n    return count;\n}\n\n// Usage:\nSystem.out.println(countCharacterOccurrences(\"hello world\", List.of('l', 'o'))); // 5\n",
                "extension": "java"
            },
            {
                "title": "Count Words",
                "description": "Counts the number of words in a string",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "word",
                    "count"
                ],
                "contributors": [],
                "code": "public static int countWords(String text) {\n    return text.split(\"\\\\s+\").length;\n}\n\n// Usage:\nSystem.out.println(countWords(\"hello world\")); // 2\n",
                "extension": "java"
            },
            {
                "title": "Extract Text Between Delimiters",
                "description": "Extracts a text between two given delimiters from a string",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "delimiters",
                    "start",
                    "end"
                ],
                "contributors": [],
                "code": "public static String extractBetweenDelimiters(String text, String start, String end) {\n    int startIndex = text.indexOf(start);\n    int endIndex = text.indexOf(end, startIndex + start.length());\n    \n    if (startIndex == -1 || endIndex == -1)\n        return \"\";\n    \n    return text.substring(startIndex + start.length(), endIndex);\n}\n\n// Usage:\nSystem.out.println(extractBetweenDelimiters(\"hello, world!\", \",\", \"!\")); // \" world\"\n",
                "extension": "java"
            },
            {
                "title": "Find Longest Word",
                "description": "Returns the longest word in a string",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "length",
                    "words"
                ],
                "contributors": [],
                "code": "public static String findLongestWord(String text) {\n    String[] words = text.split(\"\\\\s+\");\n    String longestWord = words[0];\n    \n    for (String word : words) {\n        if (word.length() <= longestWord.length())\n            continue;\n            \n        longestWord = word;\n    }\n\n    return longestWord;\n}\n\n// Usage:\nSystem.out.println(findLongestWord(\"hello world123\")); // \"world123\"\n",
                "extension": "java"
            },
            {
                "title": "Find Unique Characters",
                "description": "Returns a set of unique characters from a string, with options to include spaces and control case sensitivity",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "unique",
                    "characters",
                    "case-sensitive"
                ],
                "contributors": [],
                "code": "public static Set<Character> findUniqueCharacters(String text, boolean countSpaces, boolean caseSensitive) {\n    Set<Character> uniqueCharacters = new TreeSet<>();\n    \n    for (char character : text.toCharArray()) {\n        if (character == ' ' && !countSpaces)\n            continue;\n        if (!caseSensitive)\n            character = Character.toLowerCase(character);\n        uniqueCharacters.add(character);\n    }\n    \n    return uniqueCharacters;\n}\n\n// Usage:\nSystem.out.println(findUniqueCharacters(\"hello world\", false, true)); // Output: [d, e, h, l, o, r, w]\n",
                "extension": "java"
            },
            {
                "title": "Mask Text",
                "description": "Masks portions of a string, leaving specific parts at the beginning and end visible while replacing the rest with a specified character",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "mask",
                    "hide"
                ],
                "contributors": [],
                "code": "public static String partialMask(String text, int maskLengthStart, int maskLengthEnd, char mask) \n    if (text == null)\n        return null;\n    \n    StringBuilder maskedText = new StringBuilder();\n    maskedText.append(text, 0, maskLengthStart);\n    \n    for (int currentChar = maskLengthStart; currentChar < text.length(); currentChar++) {\n        maskedText.append(mask);\n    }\n    maskedText.append(text, text.length() - maskLengthEnd, text.length());\n    return maskedText.toString();\n}\n\n// Usage:\nSystem.out.println(partialMask(\"1234567890\", 4, 2, '*')); // \"1234****90\"\n",
                "extension": "java"
            },
            {
                "title": "Normalize Whitespace",
                "description": "Replaces consecutive whitespaces with a single space",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "whitespace",
                    "normalize"
                ],
                "contributors": [],
                "code": "public static String normalizeWhitespace(String text) {\n    return text.replaceAll(\" {2,}\", \" \");\n}\n\n// Usage:\nSystem.out.println(normalizeWhitespace(\"hello   world\")); // \"hello world\"\n",
                "extension": "java"
            },
            {
                "title": "Password Generator",
                "description": "Generates a random string with specified length and character set, including options for letters, numbers, and special characters ",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "password",
                    "generator",
                    "security",
                    "random",
                    "token"
                ],
                "contributors": [],
                "code": "public static String randomString(int length, boolean useLetters, boolean useNumbers, boolean useSpecialCharacters) {\n    String characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    String numbers = \"0123456789\";\n    String specialCharacters = \"!@#$%^&*()_+-=[]{}|;:,.<>?\";\n    \n    String allowedCharacters = \"\";\n    \n    if (useLetters)\n        allowedCharacters += characters;\n\n    if (useNumbers)\n        allowedCharacters += numbers;\n\n    if (useSpecialCharacters)\n        allowedCharacters += specialCharacters;\n\n    SecureRandom random = new SecureRandom();\n    StringBuilder result = new StringBuilder(length);\n\n    for (int i = 0; i < length; i++) {\n        int index = random.nextInt(allowedCharacters.length());\n        result.append(allowedCharacters.charAt(index));\n    }\n\n    return result.toString();\n}\n\n// Usage:\nSystem.out.println(randomString(10, true, true, false)); // Random string containing letters, numbers but no special characters with 10 characters\n",
                "extension": "java"
            },
            {
                "title": "Remove Punctuation",
                "description": "Removes punctuation (, . !) from a string",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "punctuation",
                    "clean",
                    "normalization"
                ],
                "contributors": [],
                "code": "public static String removePunctuation(String text) {\n    return text.replaceAll(\"[,!.?;:]\", \"\");\n}\n\n// Usage:\nSystem.out.println(removePunctuation(\"hello, world!\")); // \"hello world\"\n",
                "extension": "java"
            },
            {
                "title": "Remove Special Characters",
                "description": "Removes any character which is not alphabetic (A-Z, a-z) or numeric (0-9)",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "special-characters",
                    "clean",
                    "normalization"
                ],
                "contributors": [],
                "code": "public static String removeSpecialCharacters(String text) {\n    return text.replaceAll(\"[^a-zA-Z0-9]\", \"\");\n}\n\n// Usage:\nSystem.out.println(removeSpecialCharacters(\"hello, world!#%\")); // \"hello world\"\n",
                "extension": "java"
            },
            {
                "title": "Reverse Word Contents",
                "description": "Reverses the characters of each word in a string while preserving word order",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "reverse",
                    "words",
                    "transformation",
                    "order"
                ],
                "contributors": [],
                "code": "public static String reverseWords(String text) {\n    String[] words = text.split(\"\\\\s+\"); \n    StringBuilder reversedText = new StringBuilder();\n\n    for (String word : words) {\n        StringBuilder reversedWord = new StringBuilder(word).reverse();\n        reversedText.append(reversedWord).append(\" \");\n    }\n\n    return reversedText.toString().trim();\n}\n\n// Usage:\nSystem.out.println(reverseWordContents(\"hello world\")); // \"olleh dlrow\"\n",
                "extension": "java"
            },
            {
                "title": "Reverse Word Order",
                "description": "Reverses the order of words in a sentence while preserving the content of each word",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "reverse",
                    "words",
                    "transformation",
                    "sentence"
                ],
                "contributors": [],
                "code": "public static String reverseWords(String text) {\n    String[] words = text.split(\"\\\\s+\");\n    StringBuilder reversedSentence = new StringBuilder();\n\n    for (int currentWord = words.length - 1; currentWord >= 0; currentWord--) {\n        reversedSentence.append(words[currentWord]).append(\" \");\n    }\n\n    return reversedSentence.toString().trim();\n}\n\n// Usage:\nSystem.out.println(reverseWords(\"hello world\")); // Output: world hello\n",
                "extension": "java"
            },
            {
                "title": "Slugify String",
                "description": "Converts a string into a URL-friendly slug format",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "slug",
                    "slugify"
                ],
                "contributors": [],
                "code": "public static String slugify(String text, String separator) {\n    if (text == null)\n        return \"\";\n\n    // used to decompose accented characters to their base characters (e.g. \"é\" to \"e\")\n    String normalizedString = Normalizer.normalize(text, Normalizer.Form.NFD);\n    normalizedString = normalizedString.replaceAll(\"[\\\\p{InCombiningDiacriticalMarks}]\", \"\");\n\n    String slug = normalizedString.trim()\n            .toLowerCase()\n            .replaceAll(\"\\\\s+\", separator)\n            .replaceAll(\"[^a-z0-9\\\\-_\" + separator + \"]\", \"\")\n            .replaceAll(\"_\", separator)\n            .replaceAll(\"-\", separator)\n            .replaceAll(separator + \"+\", separator)\n            .replaceAll(separator + \"$\", \"\");\n\n    return slug;\n}\n\n// Usage:\nSystem.out.println(slugify(\"Hello World-#123-é\", \"-\")); // \"hello-world-123-e\"\n",
                "extension": "java"
            },
            {
                "title": "snake_case to camelCase",
                "description": "Converts a snake_case string into camelCase",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "conversion",
                    "camel-case",
                    "snake-case"
                ],
                "contributors": [],
                "code": "import java.util.regex.Pattern;\n\npublic static String snakeToCamel(String snakeCase) {\n    return Pattern.compile(\"(_)([a-z])\")\n        .matcher(snakeCase)\n        .replaceAll(match -> match.group(2).toUpperCase());\n}\n\n// Usage:\nSystem.out.println(snakeToCamel(\"hello_world\")); // \"helloWorld\"\n",
                "extension": "java"
            },
            {
                "title": "Spaces To Tabs",
                "description": "Converts spaces into tabs",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "tab",
                    "space",
                    "conversion"
                ],
                "contributors": [],
                "code": "public static String convertSpacesToTab(String text, int spacesPerTab) {\n    return text.replaceAll(\" \".repeat(spacesPerTab), \"\\t\");\n}\n\n// Usage:\nSystem.out.println(convertSpacesToTab(\"hello    world\", 4)); // Output: hello\\tworld\n",
                "extension": "java"
            },
            {
                "title": "String To Ascii",
                "description": "Converts a string into ascii numbers",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "ascii",
                    "encoding",
                    "conversion"
                ],
                "contributors": [],
                "code": "import java.util.ArrayList;\nimport java.util.List;\n\npublic static List<Integer> stringToAscii(String text) {\n    List<Integer> asciiCodes = new ArrayList<>();\n\n    for (char character : text.toCharArray()) {\n        asciiCodes.add((int) character);\n    }\n\n    return asciiCodes;\n}\n\n// Usage:\nSystem.out.println(stringToAscii(\"hello world\")); // [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]\n",
                "extension": "java"
            },
            {
                "title": "String To camelCase",
                "description": "Converts a string into camelCase",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "conversion",
                    "camel-case"
                ],
                "contributors": [],
                "code": "public static String stringToCamelCase(String text) {\n    String[] words = text.split(\"\\\\s+\");\n    StringBuilder camelCase = new StringBuilder(\n        words[0].substring(0, 1).toLowerCase() + words[0].substring(1)\n    );\n\n    for (int i = 1; i < words.length; i++) {\n        camelCase.append(words[i].substring(0, 1).toUpperCase());\n        camelCase.append(words[i].substring(1));\n    }\n\n    return camelCase.toString();\n}\n\n// Usage:\nSystem.out.println(stringToCamelCase(\"Hello world test\")); // \"helloWorldTest\"\n",
                "extension": "java"
            },
            {
                "title": "String To param-case",
                "description": "Converts a string into param-case",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "conversion",
                    "param-case"
                ],
                "contributors": [],
                "code": "public static String stringToParamCase(String text) {\n    return text.toLowerCase().replaceAll(\"\\\\s+\", \"-\");\n}\n\n// Usage:\nSystem.out.println(stringToParamCase(\"Hello World 123\")); // \"hello-world-123\"\n",
                "extension": "java"
            },
            {
                "title": "String To PascalCase",
                "description": "Converts a string into PascalCase",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "conversion",
                    "pascal-case"
                ],
                "contributors": [],
                "code": "public static String stringToPascalCase(String text) {\n    String[] words = text.split(\"\\\\s+\");\n    StringBuilder pascalCase = new StringBuilder();\n\n    for (String word : words) {\n        pascalCase.append(word.substring(0, 1).toUpperCase());\n        pascalCase.append(word.substring(1).toLowerCase());\n    }\n\n    return pascalCase.toString();\n}\n\n// Usage:\nSystem.out.println(stringToPascalCase(\"hello world\")); // \"HelloWorld\"\n",
                "extension": "java"
            },
            {
                "title": "String To snake_case",
                "description": "Converts a string into snake_case",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "conversion",
                    "snake-case"
                ],
                "contributors": [],
                "code": "public static String stringToSnakeCase(String text) {\n    return text.toLowerCase().replaceAll(\"\\\\s+\", \"_\");\n}\n\n// Usage:\nSystem.out.println(stringToSnakeCase(\"Hello World 123\")); // \"hello_world_123\"\n",
                "extension": "java"
            },
            {
                "title": "String To Titlecase",
                "description": "Converts a string into Title Case, where the first letter of each word is capitalized and the remaining letters are lowercase",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "conversion",
                    "title-case"
                ],
                "contributors": [],
                "code": "public static String convertToTitleCase(String text) {\n    String[] words = text.split(\"(?<=\\\\S)(?=\\\\s+)|(?<=\\\\s+)(?=\\\\S)\"); // this is needed to preserve spaces (text.split(\" \") would remove multiple spaces)\n    StringBuilder capitalizedText = new StringBuilder();\n\n    for (String word : words) {\n        if (word.trim().isEmpty()) {\n            capitalizedText.append(word);\n            continue;\n        }\n\n        capitalizedText.append(Character.toUpperCase(word.charAt(0)))\n                .append(word.substring(1).toLowerCase());\n    }\n\n    return capitalizedText.toString().trim();\n}\n\n// Usage:\nSystem.out.println(convertToTitleCase(\"heLlo wOrld\")); // \"Hello World\"\n",
                "extension": "java"
            },
            {
                "title": "String To Unicode",
                "description": "Converts characters of a string into their unicode representation",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "unicode",
                    "encoding",
                    "conversion"
                ],
                "contributors": [],
                "code": "public static String stringToUnicode(String text) {\n    StringBuilder unicodeText = new StringBuilder();\n\n    for (char character : text.toCharArray()) {\n        unicodeText.append(String.format(\"\\\\u%04x\", (int) character));\n    }\n\n    return unicodeText.toString();\n}\n\n// Usage:\nSystem.out.println(stringToUnicode(\"hello world\")); // \\u0068\\u0065\\u006C\\u006C\\u006F\\u0020\\u0077\\u006F\\u0072\\u006C\\u0064\n",
                "extension": "java"
            },
            {
                "title": "Tabs To Spaces",
                "description": "Converts tabs into spaces",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "tab",
                    "space",
                    "conversion"
                ],
                "contributors": [],
                "code": "public static String convertTabToSpace(String text, int spacesPerTab) {\n    return text.replaceAll(\"\\t\", \" \".repeat(spacesPerTab));\n}\n\n// Usage:\nSystem.out.println(convertTabToSpace(\"hello\\tworld\", 2)); // \"hello  world\"\n",
                "extension": "java"
            },
            {
                "title": "Truncate String",
                "description": "Truncates a string after a specified length (can also be used for hiding information)",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "truncate",
                    "mask",
                    "hide"
                ],
                "contributors": [],
                "code": "public static String truncate(String text, int length, String suffix) {\n    if (text.length() <= length)\n        return text;\n    \n    return text.substring(0, length).trim() + (suffix != null ? suffix : \"\");\n}\n\n// Usage:\nSystem.out.println(truncate(\"hello world\", 5, \"...\")); // \"hello...\"\n",
                "extension": "java"
            },
            {
                "title": "Unicode To String",
                "description": "Converts a unicode String into its normal representation",
                "author": "Mcbencrafter",
                "tags": [
                    "string",
                    "unicode",
                    "encoding",
                    "decoding",
                    "conversion"
                ],
                "contributors": [],
                "code": "public static String unicodeToString(String unicode) {\n    StringBuilder string = new StringBuilder();\n    String[] hex = unicode.split(\"\\\\\\\\u\");\n\n    for (int symbol = 1; symbol < hex.length; symbol++) {\n        int data = Integer.parseInt(hex[symbol], 16);\n        string.append((char) data);\n    }\n\n    return string.toString();\n}\n\n// Usage:\nSystem.out.println(unicodeToString(\"\\\\u0068\\\\u0065\\\\u006c\\\\u006c\\\\u006f\\\\u0020\\\\u0077\\\\u006f\\\\u0072\\\\u006c\\\\u0064\")); // \"hello world\"\n",
                "extension": "java"
            }
        ]
    }
]